{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://browserbox.dev/schemas/schemas-metadata.schema.json",
  "title": "Schema Validations Metadata",
  "description": "Schema for schemas/metadata.json in BrowserBox configuration packages using two-path validation approach",
  "type": "array",
  "items": {
    "type": "object",
    "required": [
      "id",
      "title",
      "description",
      "validationType",
      "targetFileId"
    ],
    "properties": {
      "id": {
        "type": "string",
        "pattern": "^[a-z0-9-_]+$",
        "minLength": 1,
        "maxLength": 50,
        "description": "Unique identifier for this schema validation"
      },
      "title": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100,
        "description": "Human-readable validation name displayed in the UI"
      },
      "description": {
        "type": "string",
        "minLength": 10,
        "maxLength": 500,
        "description": "Detailed explanation of what this validation checks"
      },
      "validationType": {
        "type": "string",
        "enum": ["javascript", "python"],
        "description": "Type of validation: 'javascript' for simple files, 'python' for complex validation"
      },
      "targetFileId": {
        "type": "string",
        "description": "ID of the file requirement this validation targets"
      },
      "category": {
        "type": "string",
        "enum": ["validation", "quality", "compliance", "completeness", "consistency"],
        "description": "Validation category for organization"
      },
      "tags": {
        "type": "array",
        "items": {
          "type": "string",
          "minLength": 1,
          "maxLength": 30
        },
        "maxItems": 10,
        "description": "Tags for searching and filtering validations"
      }
    },
    "allOf": [
      {
        "if": {
          "properties": {
            "validationType": { "const": "javascript" }
          }
        },
        "then": {
          "properties": {
            "validationRules": {
              "type": "object",
              "properties": {
                "requiredColumns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Column names that must be present in the data"
                },
                "columnTypes": {
                  "type": "object",
                  "patternProperties": {
                    "^[a-zA-Z_][a-zA-Z0-9_]*$": {
                      "type": "string",
                      "enum": ["string", "number", "boolean", "date"]
                    }
                  },
                  "description": "Expected data types for columns"
                },
                "constraints": {
                  "type": "object",
                  "patternProperties": {
                    "^[a-zA-Z_][a-zA-Z0-9_]*$": {
                      "type": "object",
                      "properties": {
                        "min": {
                          "type": "number",
                          "description": "Minimum value for numeric columns"
                        },
                        "max": {
                          "type": "number",
                          "description": "Maximum value for numeric columns"
                        },
                        "pattern": {
                          "type": "string",
                          "description": "Regular expression pattern for string columns"
                        },
                        "allowedValues": {
                          "type": "array",
                          "items": {
                            "type": ["string", "number"]
                          },
                          "description": "List of allowed values"
                        },
                        "notNull": {
                          "type": "boolean",
                          "description": "Whether null values are allowed"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "description": "Validation constraints for specific columns"
                },
                "rowCount": {
                  "type": "object",
                  "properties": {
                    "min": {
                      "type": "number",
                      "minimum": 0,
                      "description": "Minimum number of rows required"
                    },
                    "max": {
                      "type": "number",
                      "minimum": 0,
                      "description": "Maximum number of rows allowed"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Row count constraints"
                }
              },
              "additionalProperties": false,
              "description": "JavaScript validation rules for simple file validation"
            }
          },
          "required": ["validationRules"]
        }
      },
      {
        "if": {
          "properties": {
            "validationType": { "const": "python" }
          }
        },
        "then": {
          "properties": {
            "filename": {
              "type": "string",
              "pattern": "^[^<>:\"/\\\\|?*]+\\.py$",
              "description": "Python validation script filename in the schemas/ directory"
            },
            "outputHtml": {
              "type": "string",
              "pattern": "^[^<>:\"/\\\\|?*]+\\.html$",
              "description": "Expected HTML report filename that the Python script will generate"
            }
          },
          "required": ["filename", "outputHtml"]
        }
      }
    ],
    "additionalProperties": false
  },
  "examples": [
    [
      {
        "id": "customer-data-validation",
        "title": "Customer Data Validation",
        "description": "Validate customer CSV file structure and basic data quality checks",
        "validationType": "javascript",
        "targetFileId": "customer_data",
        "category": "validation",
        "tags": ["customer", "csv", "basic"],
        "validationRules": {
          "requiredColumns": ["customer_id", "name", "email"],
          "columnTypes": {
            "customer_id": "string",
            "name": "string",
            "email": "string",
            "age": "number"
          },
          "constraints": {
            "email": {
              "pattern": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
              "notNull": true
            },
            "age": {
              "min": 0,
              "max": 120
            },
            "customer_id": {
              "pattern": "^C[0-9]{3,6}$",
              "notNull": true
            }
          },
          "rowCount": {
            "min": 1,
            "max": 100000
          }
        }
      },
      {
        "id": "geopackage-validation",
        "title": "GeoPackage Spatial Validation",
        "description": "Comprehensive validation of GeoPackage structure, spatial data integrity, and coordinate systems",
        "validationType": "python",
        "targetFileId": "spatial_data",
        "category": "quality",
        "tags": ["geopackage", "spatial", "advanced"],
        "filename": "geopackage_validation.py",
        "outputHtml": "geopackage_validation_report.html"
      }
    ]
  ]
}